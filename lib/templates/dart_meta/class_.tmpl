#< if(_.doc != null) { >
${rightTrim(docComment(_.doc))}
#< } >
#< String abstractTag = _.isAbstract? 'abstract ':''; >
#< if(_.mixins.length>0) { >
${abstractTag}class ${_.className} extends ${_.extend} with ${_.mixins.join(',')}${_.implementsClause}{
#< } else if(null != _.extend) { >
${abstractTag}class ${_.className} extends ${_.extend}${_.implementsClause}{
#< } else { >
${abstractTag}class ${_.className}${_.implementsClause}{
#< } >
#< _.orderedCtors.forEach((ctorName) { >

${indentBlock(_.ctors[ctorName].ctorText)}
#< }); >
#< for(var member in _.members) { >
#<   if(member.hasPublicCode) { >
${indentBlock(chomp(member.publicCode))}
#<   } >
#< } >
#< if(_.includeCustom) { >

${rightTrim(indentBlock(customBlock("class ${_.name}")))}
#< } >
#< if(_.toJsonSupport) { >

  Map toJson() {
    return {
#<   for(Member member in _.members.where((m) => !m.jsonTransient)) { >
    "${member.name}": EBISU_UTILS.toJson(${member.hasGetter? member.name : member.varName}),
#<   } >
#<   if(null != _.extend) { >
    "${_.extend}": super.toJson(),
#<   } else if(_.mixins.length > 0) { >
    // TODO consider mixin support: "${_.className}": super.toJson(),
#<   } >
    };
  }

  static Map randJson() {
    return {
#<   for(Member member in _.members.where((m) => !m.jsonTransient)) { >
#<     if(isMapType(member.type)) { >
#<       String valType = jsonMapValueType(member.type);  >
#<       if(isJsonableType(valType)) { >
    "${member.name}":
       EBISU_UTILS.randJsonMap(_randomJsonGenerator,
        () => EBISU_UTILS.randJson(_randomJsonGenerator, ${valType}),
        "${member.name}"),
#<       } else { >
    "${member.name}":
       EBISU_UTILS.randJsonMap(_randomJsonGenerator,
        () => ${valType}.randJson(),
        "${member.name}"),
#<       } >
#<     } else if(isListType(member.type)) { >
#<       String valType = jsonListValueType(member.type);  >
#<       if(isJsonableType(valType)) { >
    "${member.name}":
       EBISU_UTILS.randJson(_randomJsonGenerator, [],
        () => EBISU_UTILS.randJson(_randomJsonGenerator, ${valType})),
#<       } else { >
    "${member.name}":
       EBISU_UTILS.randJson(_randomJsonGenerator, [],
        () => ${valType}.randJson()),
#<       }  >
#<     } else if(isJsonableType(member.type)) { >
    "${member.name}": EBISU_UTILS.randJson(_randomJsonGenerator, ${member.type}),
#<     } else { >
    "${member.name}": EBISU_UTILS.randJson(_randomJsonGenerator, ${member.type}.randJson),
#<     } >
#<   } >
    };
  }

#<   } >
#< if(_.jsonSupport) { >

  static ${_.name} fromJson(String json) {
    Map jsonMap = convert.JSON.decode(json);
    ${_.name} result = new ${_.jsonCtor}();
    result._fromJsonMapImpl(jsonMap);
    return result;
  }

  static ${_.name} fromJsonMap(Map jsonMap) {
    ${_.name} result = new ${_.jsonCtor}();
    result._fromJsonMapImpl(jsonMap);
    return result;
  }

  void _fromJsonMapImpl(Map jsonMap) {
#<   for(Member m in _.members.where((m) => !m.jsonTransient)) { >
#<     if(_.isClassJsonable(m.type)) { >
    ${m.varName} = (jsonMap["${m.name}"] is Map)?
      ${m.type}.fromJsonMap(jsonMap["${m.name}"]) :
      ${m.type}.fromJson(jsonMap["${m.name}"]);
#<     } else if(isMapType(m.type)) { >
#<       String valType = jsonMapValueType(m.type);  >
#<       if(valType != null) { >
    // ${m.name} map of <String, ${valType}>
    ${m.name} = { };
    jsonMap["${m.name}"].forEach((k,v) {
      ${m.varName}[k] = ${valType}.fromJsonMap(v);
    });
#<       } >
#<     } else if(isListType(m.type)) { >
#<       String valType = jsonListValueType(m.type);  >
#<       if(valType != null) { >
    // ${m.name} list of ${valType}
    ${m.varName} = new ${m.type}();
    jsonMap["${m.name}"].forEach((v) {
      ${m.varName}.add(${valType}.fromJsonMap(v));
    });
#<       } >
#<     } else { >
#<       if(m.type == 'DateTime') { >
    ${m.varName} = DateTime.parse(jsonMap["${m.name}"]);
#<       } else { >
    ${m.varName} = jsonMap["${m.name}"];
#<       } >
#<     } >
#<   } >
  }
#< } >
#< for(var member in _.members) { >
#<   if(member.hasPrivateCode) { >
${indentBlock(chomp(member.privateCode))}
#<   } >
#< } >
}
#< if(_.ctorSansNew) {  >
#<   if(_.ctors.length>0) { >
#<     _.ctors.forEach((ctorName, ctor) { >
${ctor.ctorSansNew}
#<     }); >
#<   } else { >
${_.id.camel}() => new ${_.name}();
#<   } >
#< } >
